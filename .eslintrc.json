{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "env": {
    "node": true,
    "jest": true
  },
  "parserOptions": {
    "project": "tsconfig.json",
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint/eslint-plugin",
    "import",
    "prefer-arrow",
    "unicorn"
  ],
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/strict",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:unicorn/recommended",
    "prettier"
  ],
  "rules": {
    // eslint -- Possible Problems
    "array-callback-return": "error",
    "no-await-in-loop": "error",
    "no-constant-binary-expression": "error",
    "no-constructor-return": "error",
    "no-new-native-nonconstructor": "error",
    "no-promise-executor-return": "error",
    "no-self-compare": "error",
    "no-template-curly-in-string": "error",
    "no-unmodified-loop-condition": "error",
    "no-unreachable-loop": "error",
    "no-unused-private-class-members": "error",
    "no-use-before-define": "off",
    "require-atomic-updates": "error",

    // eslint -- Suggestions
    "arrow-body-style": ["warn", "as-needed"],
    "block-scoped-var": "error",
    "capitalized-comments": "error",
    "complexity": [
      "error", {
        "max": 15
      }
    ],
    "consistent-this": "error",
    "default-case-last": "error",
    "dot-notation": "off",
    "eqeqeq": "warn",
    "no-alert": "error",
    "no-array-constructor": "off",
    "no-caller": "error",
    "no-confusing-arrow": "error",
    "no-console": "warn",
    "no-div-regex": "warn",
    "no-else-return": "warn",
    "no-empty-static-block": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "warn",
    "no-extra-label": "warn",
    "no-floating-decimal": "warn",
    "no-implicit-coercion": "warn",
    "no-implicit-globals": "error",
    "no-implied-eval": "off",
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-lone-blocks": "error",
    "no-lonely-if": "warn",
    "no-loop-func": "off",
    "no-multi-assign": "error",
    "no-multi-str": "error",
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-wrappers": "error",
    "no-octal-escape": "error",
    "no-param-reassign": "error",
    "no-proto": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[callee.name='setTimeout'][arguments.length!=2]",
        "message": "setTimeout must always be invoked with two arguments"
      },
      {
        "selector": "CallExpression[callee.name='setInterval'][arguments.length!=2]",
        "message": "setInterval must always be invoked with two arguments"
      }
    ],
    "no-return-assign": "error",
    "no-return-await": "off",
    "no-script-url": "error",
    "no-sequences": "error",
    "no-shadow": "off",
    "no-throw-literal": "off",
    "no-underscore-dangle": "error",
    "no-unneeded-ternary": "warn",
    "no-unused-expressions": "off",
    "no-useless-call": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-rename": "warn",
    "no-useless-return": "warn",
    "no-var": "warn",
    "object-shorthand": "warn",
    "one-var-declaration-per-line": "warn",
    "prefer-arrow-callback": "warn",
    "prefer-const": "warn",
    "prefer-destructuring": [
      "warn", {
        "array": true,
        "object": false
      }
    ],
    "prefer-exponentiation-operator": "warn",
    "prefer-named-capture-group": "error",
    "prefer-numeric-literals": "warn",
    "prefer-object-has-own": "warn",
    "prefer-object-spread": "warn",
    "prefer-promise-reject-errors": "error",
    "prefer-regex-literals": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "warn",
    "require-unicode-regexp": "error",
    "symbol-description": "error",
    "yoda": [
      "error", "never", {
        "exceptRange": true
      }
    ],

    // @typescript-eslint/eslint-plugin -- Supported Rules
    "@typescript-eslint/consistent-type-assertions": "warn",
    "@typescript-eslint/consistent-type-exports": "error",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/no-empty-interface": "warn",
    "@typescript-eslint/no-extraneous-class": "off",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/prefer-enum-initializers": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/require-array-sort-compare": "error",

    // @typescript-eslint/eslint-plugin -- Extension Rules
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/no-invalid-this": "error",
    "@typescript-eslint/no-loop-func": "error",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/return-await": "error",

    // eslint-plugin-import -- Helpful warnings
    "import/no-empty-named-blocks": "warn",
    "import/no-extraneous-dependencies": "error",
    "import/no-mutable-exports": "error",

    // eslint-plugin-import -- Module systems
    "import/no-amd": "error",
    "import/no-commonjs": "error",
    "import/no-import-module-exports": "warn",

    // eslint-plugin-import -- Static analysis
    "import/no-absolute-path": "warn",
    "import/no-self-import": "error",
    "import/no-useless-path-segments": "warn",
    "import/no-webpack-loader-syntax": "error",

    // eslint-plugin-import -- Style guide
    "import/consistent-type-specifier-style": ["error", "prefer-top-level"],
    "import/exports-last": "error",
    "import/first": "warn",
    "import/group-exports": "error",
    "import/newline-after-import": "warn",
    "import/no-default-export": "error",
    "import/no-namespace": "warn",
    "import/order": [
      "warn", {
        "groups": [
          "builtin",
          "external",
          "internal",
          "sibling",
          "parent",
          "index",
          "object",
          "type"
        ]
      }
    ],

    // prefer-arrow
    "prefer-arrow/prefer-arrow-functions": "error",

    // unicorn
    "unicorn/filename-case": [
      "error", {
        "cases": {
          "kebabCase": true
        }
      }
    ],
    "unicorn/prevent-abbreviations": [
      "error", {
        "allowList": {
          "moduleRef": true,
          "args": true,
          "fn": true,
          "i": true
        },
        "ignore": [
          ".*Fn$",
          ".*ReqDto$",
          ".*ResDto$",
          ".*.e2e-spec$",
          ".*.res.dto$",
          ".*.req.dto$"
        ]
      }
    ]
  }
}
